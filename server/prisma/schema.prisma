// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  firstName    String
  lastName     String
  role         UserRole @default(STUDENT)
  bio          String?
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  createdCourses Course[]         @relation("CreatedCourses")
  enrollments    Enrollment[]
  progress       LessonProgress[]
}

enum UserRole {
  STUDENT
  EDUCATOR
  ADMIN
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String
  category    String
  level       CourseLevel
  thumbnail   String?
  status      CourseStatus @default(DRAFT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  creator     User         @relation("CreatedCourses", fields: [creatorId], references: [id])
  creatorId   String
  sections    Section[]
  enrollments Enrollment[]
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Section {
  id        String   @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  lessons  Lesson[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String?
  duration    String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  section   Section          @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String
  progress  LessonProgress[]
}

model Enrollment {
  id         String   @id @default(cuid())
  enrolledAt DateTime @default(now())

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  @@unique([userId, courseId])
}

model LessonProgress {
  id          String    @id @default(cuid())
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@unique([userId, lessonId])
}
